#IMPORTATION:
  # Import the system clock (fires tick events every 0.25s)
  #SystemClock = clock.des

INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI
    
    root = Tk()
    root.title("A Title")
    g = DWatchGUI(root, eventhandler)

    SystemTicksCount = 0
    
    eventhandler.start()
    root.mainloop()
    
    exit() # keep SVM from crashing at exit

STATECHART:
    System [DS]
        Clock [CS] [DS]
            Ticker [DS]
        Watch [CS] [DS]
            DisplayTime [DS]
            DisplayChrono
        Light [CS] [DS]
            Off [DS]
            On
            Waiting

TRANSITION:
    S: System.Clock.Ticker
    N: System.Clock.Ticker
    T: 0.25
    O: [EVENT("tick")]
       SystemTicksCount += 1

TRANSITION:
    S: System.Watch.DisplayTime
    N: System.Watch.DisplayTime
    E: tick
    C: SystemTicksCount%4 == 0
    O: g.increaseTimeByOne()
       g.refreshTimeDisplay()

###############################################################################
# BACKGROUND LIGHTS
###############################################################################

TRANSITION:
    S: System.Light.Off
    N: System.Light.On
    E: lightOn
    O: g.setIndiglo()

TRANSITION:
    S: System.Light.On
    N: System.Light.Waiting
    E: lightOff
    O: LightTicksCount = 0

TRANSITION:
    S: System.Light.Waiting
    N: System.Light.Waiting
    E: tick
    C: LightTicksCount < 8
    O: LightTicksCount += 1

TRANSITION:
    S: System.Light.Waiting
    N: System.Light.Off
    E: tick
    C: LightTicksCount >= 8
    O: g.unsetIndiglo()

# DEBUG EVENTS

ENTER:
    N: System.Light.On
    O: print "Enter System.Light.On"

EXIT:
    S: System.Light.On
    O: print "Exit System.Light.On"

ENTER:
    N: System.Light.Off
    O: print "Enter System.Light.Off"

EXIT:
    S: System.Light.Off
    O: print "Exit System.Light.Off"

ENTER:
    N: System.Light.Waiting
    O: print "Enter System.Light.Waiting"

EXIT:
    S: System.Light.Waiting
    O: print "Exit System.Light.Waiting"
